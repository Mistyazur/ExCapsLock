#include "keyboardhook.h"
#include "keysequence.h"
#include "cmdpalette.h"
#include "CmdItem/wincontrollor.h"
#include "TlHelp32.h"
#include <QTime>
#include <QDebug>


CmdPalette *g_cmdPalette = nullptr;

void SimulateKey(WORD key, BOOL down)
{
    INPUT input[1] = {0};
    input[0].type = INPUT_KEYBOARD;
    input[0].ki.wVk = key;
    input[0].ki.dwFlags = down ? 0 : KEYEVENTF_KEYUP;
    ::SendInput(_countof(input), input, sizeof(INPUT));
}

void SwitchWindowWithSameOwner()
{
    // Get foreground window process id and window handle

    HWND hWnd = ::GetForegroundWindow();
    if (hWnd == NULL)
        return;

    DWORD dwForegroundPid;
    ::GetWindowThreadProcessId(hWnd, &dwForegroundPid);

    // Get processes

    QHash<DWORD, QString> procIdNameHash;
    HANDLE hProcessSnap;
    PROCESSENTRY32 pe32 = {sizeof(PROCESSENTRY32), };

    hProcessSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hProcessSnap)
        return;

    if (::Process32First(hProcessSnap, &pe32))
    {
        do {

            procIdNameHash.insert(pe32.th32ProcessID, QString::fromWCharArray(pe32.szExeFile));

        } while (::Process32Next(hProcessSnap, &pe32));
    }

    ::CloseHandle(hProcessSnap);

    // Bring tagert windowt to front

    WINDOWINFO winInfo = {sizeof(WINDOWINFO), };
    HWND hTargetWnd = NULL;

    while ((hWnd = ::GetWindow(hWnd, GW_HWNDNEXT)) != NULL)
    {
        ::GetWindowInfo(hWnd, &winInfo);
        if (!(winInfo.dwStyle & WS_DISABLED)
                && (winInfo.dwStyle & WS_VISIBLE)
                && !(winInfo.dwExStyle & WS_EX_TRANSPARENT))
        {
            if ((winInfo.rcWindow.left != 0) &&
                    (winInfo.rcWindow.top != 0) &&
                    (winInfo.rcWindow.right != 0) &&
                    (winInfo.rcWindow.bottom != 0))
            {
                DWORD dwPid;
                ::GetWindowThreadProcessId(hWnd, &dwPid);
                if (dwPid == dwForegroundPid)
                {
                    WinControllor::bringToFront(hWnd);
                    return;
                }
                else
                {
                    const QString &foregroundProcName = procIdNameHash.value(dwForegroundPid, "");
                    const QString &procName = procIdNameHash.value(dwPid, "");
                    if ((hTargetWnd == NULL)
                            && (!foregroundProcName.isEmpty())
                            && (foregroundProcName == procName))
                        hTargetWnd = hWnd;
                }
            }
        }
    }

    if (hTargetWnd != NULL)
        WinControllor::bringToFront(hTargetWnd);
}

LRESULT CALLBACK KbHookProc(int nCode, WPARAM wParam, LPARAM lParam)
{
    static KeySequence keySeq = {};
    static bool bCompositeKey = false;
    PKBDLLHOOKSTRUCT pKey = (PKBDLLHOOKSTRUCT)lParam;
    int keydown = -1;

    // Key up or down.

    if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)
        keydown = 1;
    else if (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)
        keydown = 0;
    else
        return CallNextHookEx(NULL, nCode, wParam, lParam);

    // Output
    qDebug()<<"Key: "<<wParam<<"\t"<<pKey->vkCode<<"\t"
           <<(bool)(pKey->flags & LLKHF_INJECTED)<<"\tList: "<<keySeq;

    // Key event injected was simulated.

    if (pKey->flags & LLKHF_INJECTED) {
        if (pKey->vkCode == VK_ESCAPE) {
            // Escape must be dealed
        } else {
            // Simulated keys are generated by capslock
            return CallNextHookEx(NULL, nCode, wParam, lParam);
        }
    }

    // Key event

    if (pKey->vkCode == VK_ESCAPE) {
        if (g_cmdPalette->isVisible()) {

            if (!keydown)
                g_cmdPalette->deactivate();

            // Discard this message because it deactivate command palette
            return true;
        }
    } else  if (pKey->vkCode == VK_CAPITAL) {
        if (keydown) {

            // Set false to check whether composite key
            bCompositeKey = false;

            keySeq += VK_CAPITAL;
        } else {

            // Single capslock without other keys

            if (!bCompositeKey && (keySeq == KeySequence({VK_CAPITAL}))) {
                SimulateKey(VK_ESCAPE, 1);
                SimulateKey(VK_ESCAPE, 0);
            }

            keySeq.clear();
        }

        // Discard this message because it's Caps Lock
        return true;
    } else {
        if (keySeq.startsWith(VK_CAPITAL)) {

            // Composite key
            bCompositeKey = true;

            // Add key

            if (keydown) {
                keySeq += pKey->vkCode;

                // Trigger only at key down
                if (keySeq == KeySequence({VK_CAPITAL, VK_SPACE}))
                    g_cmdPalette->activate();
                else if (keySeq == KeySequence({VK_CAPITAL, VK_TAB}))
                    SwitchWindowWithSameOwner();
            }

            // Trigger at both key down and key up

            if (keySeq == KeySequence({VK_CAPITAL, VK_F12}))
                SimulateKey(VK_CAPITAL, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'W'}))
                SimulateKey(VK_UP, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'S'}))
                SimulateKey(VK_DOWN, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'A'}))
                SimulateKey(VK_LEFT, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'D'}))
                SimulateKey(VK_RIGHT, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'Q'}))
                SimulateKey(VK_HOME, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, 'E'}))
                SimulateKey(VK_END, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, 'P'}))
                SimulateKey(VK_NUMPAD9, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, 'O'}))
                SimulateKey(VK_NUMPAD8, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, 'I'}))
                SimulateKey(VK_NUMPAD7, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_1}))
                SimulateKey(VK_NUMPAD6, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, 'L'}))
                SimulateKey(VK_NUMPAD5, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, 'K'}))
                SimulateKey(VK_NUMPAD4, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_2}))
                SimulateKey(VK_NUMPAD3, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_PERIOD}))
                SimulateKey(VK_NUMPAD2, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_COMMA}))
                SimulateKey(VK_NUMPAD1, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_SPACE}))
                SimulateKey(VK_NUMPAD0, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_RMENU}))
                SimulateKey(VK_DECIMAL, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_7}))
                SimulateKey(VK_ADD, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, '9'}))
                SimulateKey(VK_DIVIDE, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, '0'}))
                SimulateKey(VK_MULTIPLY, keydown);
            else if (keySeq == KeySequence({VK_CAPITAL, VK_LMENU, VK_OEM_MINUS}))
                SimulateKey(VK_SUBTRACT, keydown);

            // Remove key

            if (!keydown)
                keySeq -= pKey->vkCode;

            // Discard this message because it's combined with Caps Lock.
            return true;
        }
    }

    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

KeyboardHook::KeyboardHook(QObject *parent) : QObject(parent)
{
    // Turn off caps lock

    if (::GetKeyState(VK_CAPITAL) == 1)
    {
        SimulateKey(VK_CAPITAL, 1);
        SimulateKey(VK_CAPITAL, 0);
    }

    // Create Command
    g_cmdPalette = new CmdPalette();

    // Install hook
    ::SetWindowsHookEx(WH_KEYBOARD_LL,
                       KbHookProc,
                       ::GetModuleHandle(NULL),
                       0);
}

KeyboardHook::~KeyboardHook()
{
    delete g_cmdPalette;
}
